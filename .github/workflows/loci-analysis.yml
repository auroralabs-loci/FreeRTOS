name: LOCI Integration Demo
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: false
        default: 'main'
        type: string
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  build-and-analyze:
    name: FreeRTOS with LOCI
    runs-on: ubuntu-latest

    env:
      LOCI_PROJECT: FreeRTOS CM3
      LOCI_API_KEY: '${{ secrets.LOCI_API_KEY }}'
      LOCI_BACKEND_URL: '${{ vars.LOCI_BACKEND_URL }}'

    environment: ${{ vars.LOCI_ENV || 'PROD__AL_DEMO' }}

    steps:
      - name: Checkout 'FreeRTOS' repository
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.branch || github.event.pull_request.head.sha }}
          fetch-depth: 0
          submodules: recursive

      - name: Determine target branch and commit
        id: target
        run: |
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
            BRANCH="${{ github.event.pull_request.head.ref }}"
            COMMIT="${{ github.event.pull_request.head.sha }}"
          else
            # workflow_dispatch - get actual checked out commit
            BRANCH="${{ inputs.branch || 'main' }}"
            COMMIT=$(git rev-parse --abbrev HEAD)
            # workaround for loci-action using 7 characters for commit sha
            COMMIT=${COMMIT:0:7}
          fi

          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "commit=${COMMIT}" >> $GITHUB_OUTPUT
          echo "ref=${BRANCH}@${COMMIT}" >> $GITHUB_OUTPUT

          echo "> Target: ${BRANCH}@${COMMIT}"

      - name: Install GNU ARM Toolchain
        shell: bash
        run: |
          sudo apt-get -y update
          sudo apt-get -y install gcc-arm-none-eabi build-essential cmake git ninja-build python3-minimal

      - name: Build CORTEX_MPU_M3_MPS2_QEMU_GCC Demo
        shell: bash
        working-directory: FreeRTOS/Demo/CORTEX_MPU_M3_MPS2_QEMU_GCC
        run: make -j

      - name: FreeRTOS demo (upload)
        uses: auroralabs-loci/loci-action@v1.0.1
        with:
          mode: upload
          project: '${{ env.LOCI_PROJECT }}'
          target: '${{ steps.target.outputs.ref }}'
          binaries: |
            FreeRTOS/Demo/CORTEX_MPU_M3_MPS2_QEMU_GCC/build/RTOSDemo.axf
          wait-base: 'true'

      - name: FreeRTOS demo (summary)
        uses: auroralabs-loci/loci-action@v1.0.1
        env:
          LOCI_GITHUB_TOKEN: '${{ secrets.REPO_READ_ONLY_PAT }}'
        with:
          mode: summary
          project: '${{ env.LOCI_PROJECT }}'
          target: '${{ steps.target.outputs.ref }}'
          wait-base: 'true'
